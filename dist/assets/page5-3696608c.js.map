{"version":3,"file":"page5-3696608c.js","sources":["../../src/act1/script7.js"],"sourcesContent":["import * as three from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\n\r\n\r\nconst canvas = document.querySelector('canvas.webgl');\r\n\r\nconst sizes = \r\n{\r\n  width: window.innerWidth,\r\n  height: window.innerHeight\r\n};\r\n\r\nconst scene = new three.Scene();\r\n\r\n\r\nconst obj = new three.BufferGeometry();\r\n// const posArr = new Float32Array\r\n// (\r\n//   [\r\n//     0,0,0,\r\n//     0,1,0,\r\n//     1,0,0\r\n//   ]\r\n// );\r\n\r\nconst count = 50;\r\nconst posArr = new Float32Array(count * 3 * 3);\r\nfor(let i = 0; i < count * 3 * 3; i++)\r\n{\r\n  posArr[i] = (Math.random() - 0.5) * 4;\r\n}\r\n\r\nconst posAtrrib = new three.BufferAttribute(posArr, 3);\r\nobj.setAttribute('position', posAtrrib);\r\n\r\n\r\nconst mat = new three.MeshBasicMaterial({color: 0xff3100, wireframe: true});\r\nconst mesh = new three.Mesh(obj, mat);\r\nscene.add(mesh);\r\n\r\n\r\nconst cam = new three.PerspectiveCamera(75, sizes.width/sizes.height);\r\ncam.position.z = 3;\r\nscene.add(cam);\r\n\r\nconst control = new OrbitControls(cam, canvas);\r\ncontrol.enableDamping = true;\r\n\r\n\r\nwindow.addEventListener('resize', () =>\r\n{\r\n  sizes.width = window.innerWidth;\r\n  sizes.height = window.innerHeight;\r\n  cam.aspect = sizes.width / sizes.height;\r\n  renderer.setSize(sizes.width, sizes.height);\r\n  \r\n  cam.updateProjectionMatrix();\r\n}) \r\n\r\n\r\nwindow.addEventListener('dblclick', () =>\r\n{\r\n  const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement\r\n\r\n  if(!fullscreenElement)\r\n  {\r\n    if(canvas.requestFullscreen)\r\n    {\r\n      canvas.requestFullscreen();\r\n    }\r\n    else if(canvas.webkitFullscreenElement)\r\n    {\r\n      canvas.webkitFullscreenElement();\r\n    }\r\n  }\r\n  else\r\n  {\r\n    if(document.exitFullscreen)\r\n    {\r\n      document.exitFullscreen();\r\n    }\r\n    else if(document.webkitFullscreenElement)\r\n    {\r\n      document.webkitFullscreenElement();\r\n    }\r\n  }\r\n})\r\n\r\nconst renderer = new three.WebGLRenderer\r\n({\r\n  canvas: canvas\r\n});\r\nrenderer.setSize(sizes.width, sizes.height);\r\nrenderer.render(scene,cam);\r\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\r\n\r\nconst tick = () =>\r\n{\r\n  control.update();\r\n  renderer.render(scene, cam);\r\n  window.requestAnimationFrame(tick);\r\n}\r\n\r\ntick();\r\n\r\n"],"names":["canvas","sizes","scene","three.Scene","obj","three.BufferGeometry","count","posArr","i","posAtrrib","three.BufferAttribute","mat","three.MeshBasicMaterial","mesh","three.Mesh","cam","three.PerspectiveCamera","control","OrbitControls","renderer","three.WebGLRenderer","tick"],"mappings":"gKAIA,MAAMA,EAAS,SAAS,cAAc,cAAc,EAE9CC,EACN,CACE,MAAO,OAAO,WACd,OAAQ,OAAO,WACjB,EAEMC,EAAQ,IAAIC,EAGZC,EAAM,IAAIC,EAUVC,EAAQ,GACRC,EAAS,IAAI,aAAaD,EAAQ,EAAI,CAAC,EAC7C,QAAQE,EAAI,EAAGA,EAAIF,EAAQ,EAAI,EAAGE,IAEhCD,EAAOC,CAAC,GAAK,KAAK,OAAQ,EAAG,IAAO,EAGtC,MAAMC,EAAY,IAAIC,EAAsBH,EAAQ,CAAC,EACrDH,EAAI,aAAa,WAAYK,CAAS,EAGtC,MAAME,EAAM,IAAIC,EAAwB,CAAC,MAAO,SAAU,UAAW,EAAI,CAAC,EACpEC,EAAO,IAAIC,EAAWV,EAAKO,CAAG,EACpCT,EAAM,IAAIW,CAAI,EAGd,MAAME,EAAM,IAAIC,EAAwB,GAAIf,EAAM,MAAMA,EAAM,MAAM,EACpEc,EAAI,SAAS,EAAI,EACjBb,EAAM,IAAIa,CAAG,EAEb,MAAME,EAAU,IAAIC,EAAcH,EAAKf,CAAM,EAC7CiB,EAAQ,cAAgB,GAGxB,OAAO,iBAAiB,SAAU,IAClC,CACEhB,EAAM,MAAQ,OAAO,WACrBA,EAAM,OAAS,OAAO,YACtBc,EAAI,OAASd,EAAM,MAAQA,EAAM,OACjCkB,EAAS,QAAQlB,EAAM,MAAOA,EAAM,MAAM,EAE1Cc,EAAI,uBAAsB,CAC5B,CAAC,EAGD,OAAO,iBAAiB,WAAY,IACpC,CAC4B,SAAS,mBAAqB,SAAS,wBAe5D,SAAS,eAEV,SAAS,eAAc,EAEjB,SAAS,yBAEf,SAAS,wBAAuB,EAjB/Bf,EAAO,kBAERA,EAAO,kBAAiB,EAElBA,EAAO,yBAEbA,EAAO,wBAAuB,CAcpC,CAAC,EAED,MAAMmB,EAAW,IAAIC,EACpB,CACC,OAAQpB,CACV,CAAC,EACDmB,EAAS,QAAQlB,EAAM,MAAOA,EAAM,MAAM,EAC1CkB,EAAS,OAAOjB,EAAMa,CAAG,EACzBI,EAAS,cAAc,KAAK,IAAI,OAAO,iBAAkB,CAAC,CAAC,EAG3D,MAAME,EAAO,IACb,CACEJ,EAAQ,OAAM,EACdE,EAAS,OAAOjB,EAAOa,CAAG,EAC1B,OAAO,sBAAsBM,CAAI,CACnC,EAEAA,EAAM"}