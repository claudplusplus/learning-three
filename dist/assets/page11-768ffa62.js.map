{"version":3,"file":"page11-768ffa62.js","sources":["../../src/act2/script3.js"],"sourcesContent":["import * as three from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport * as lilGUI from 'lil-gui'\r\n\r\nconst canvas = document.querySelector('canvas.webgl');\r\nconst scene = new three.Scene();\r\nconst gui = new lilGUI.GUI()\r\n\r\nconst sizes =\r\n{\r\n  width: window.innerWidth,\r\n  height: window.innerHeight\r\n}\r\n\r\n\r\nconst param = {}\r\nparam.count = 4500\r\nparam.size = 0.02\r\nparam.radius = 3.8\r\nparam.branches = 3\r\nparam.spin = 1\r\nparam.randomness = 0.25\r\nparam.randomnessPow = 1\r\nparam.insideColor = '#c91870'\r\nparam.outsideColor = '#1b3984'\r\n\r\n\r\n// Optionally, adjust ambient light if necessary\r\nconst ambientLight = new three.AmbientLight('#555555', 0.5); // Soft light to illuminate everything slightly\r\nscene.add(ambientLight);\r\n\r\nlet sphere = null\r\nlet pointLight = null\r\n\r\nconst geometry = new three.BufferGeometry()\r\nconst colors = new Float32Array(param.count * 3)\r\n\r\nconst mats = new three.PointsMaterial({\r\n  size: param.size,\r\n  sizeAttenuation: true,\r\n  depthWrite: false,\r\n  blending: three.AdditiveBlending,\r\n  vertexColors: true\r\n})\r\nconst points = new three.Points(geometry, mats)\r\n\r\nconst genGalaxy = () =>\r\n{ \r\n  if(points !== null)\r\n  {\r\n    geometry.dispose()\r\n    mats.dispose()\r\n    scene.remove(points)\r\n  }\r\n\r\n  if (sphere) {\r\n    sphere.geometry.dispose();\r\n    sphere.material.dispose();\r\n    scene.remove(sphere);\r\n  }\r\n\r\n  const pos = new Float32Array(param.count * 3)\r\n  const colorInside = new three.Color(param.insideColor)\r\n  const colorOutside = new three.Color(param.outsideColor)\r\n  \r\n  geometry.setAttribute('position', new three.BufferAttribute(pos, 3))\r\n  geometry.setAttribute('color', new three.BufferAttribute(colors, 3))\r\n\r\n  for(let i = 0; i < param.count; i++)\r\n  {\r\n    const i3 = i * 3\r\n    const radius = Math.random() * param.radius\r\n    const branchAngle = (i % param.branches) / param.branches * Math.PI * 2\r\n    const spinAngle = radius * param.spin\r\n    const randomX = Math.pow(Math.random(), param.randomnessPow) * (Math.random() < 0.5 ? 1 : - 1) * param.randomness * radius\r\n    const randomY = Math.pow(Math.random(), param.randomnessPow) * (Math.random() < 0.5 ? 1 : - 1) * param.randomness * radius\r\n    const randomZ = Math.pow(Math.random(), param.randomnessPow) * (Math.random() < 0.5 ? 1 : - 1) * param.randomness * radius\r\n\r\n    pos[i3 ] = Math.cos(branchAngle + spinAngle) * radius + randomX // for x\r\n    pos[i3 + 1] = randomY // for y\r\n    pos[i3 + 2] = Math.sin(branchAngle + spinAngle) * radius + randomZ // for z\r\n\r\n    const mixedColor = colorInside.clone()\r\n    mixedColor.lerp(colorOutside, radius / param.radius)\r\n    colors[i3 ] = mixedColor.r\r\n    colors[i3 + 1] = mixedColor.g\r\n    colors[i3 + 2] = mixedColor.b\r\n  }\r\n  scene.add(points)\r\n\r\n  const sphereGeometry = new three.SphereGeometry(0.05,64,64);\r\n  const sphereMaterial = new three.MeshStandardMaterial({\r\n    color: param.insideColor,\r\n    emissive: param.insideColor,\r\n    emissiveIntensity: 0.8,\r\n    roughness: 0.5,\r\n    metalness: 0.3,\r\n  });\r\n  sphere = new three.Mesh(sphereGeometry, sphereMaterial);\r\n  scene.add(sphere);\r\n\r\n  if (!pointLight) {\r\n    pointLight = new three.PointLight(param.insideColor, 1, 50);\r\n    pointLight.position.set(0, 0, 0);\r\n    scene.add(pointLight);\r\n  } else {\r\n    pointLight.color.set(param.insideColor);\r\n  }\r\n}\r\n\r\ngenGalaxy()\r\n\r\ngui.add(param, 'count').min(100).max(1000000).step(100).onFinishChange(genGalaxy)\r\ngui.add(param, 'size').min(0.001).max(0.1).step(0.001).onFinishChange(genGalaxy)\r\ngui.add(param, 'radius').min(0.01).max(20).step(0.01).onFinishChange(genGalaxy)\r\ngui.add(param,'branches').min(2).max(20).step(1).onFinishChange(genGalaxy)\r\ngui.add(param, 'spin').min(-5).max(5).step(0.001).onFinishChange(genGalaxy)\r\ngui.add(param,  'randomness').min(0).max(2).step(0.001).onFinishChange(genGalaxy)\r\ngui.add(param, 'randomnessPow').min(1).max(10).step(0.001).onFinishChange(genGalaxy)\r\ngui.addColor(param, 'insideColor').onFinishChange(genGalaxy)\r\ngui.addColor(param, 'outsideColor').onFinishChange(genGalaxy)\r\n\r\nconst cam = new three.PerspectiveCamera(75, sizes.width / sizes.height);\r\ncam.position.y = 3.5\r\ncam.position.z = 4\r\nscene.add(cam);\r\nconst control = new OrbitControls(cam, canvas);\r\ncontrol.enableDamping = true;\r\n\r\nwindow.addEventListener('resize', () =>\r\n{\r\n  sizes.width = window.innerWidth;\r\n  sizes.height = window.innerHeight;\r\n  cam.aspect = sizes.width / sizes.height;\r\n  renderer.setSize(sizes.width, sizes.height);\r\n  \r\n  cam.updateProjectionMatrix();\r\n}) \r\n\r\nwindow.addEventListener('dblclick', () =>\r\n{\r\n  const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement\r\n\r\n  if(!fullscreenElement)\r\n  {\r\n    if(canvas.requestFullscreen)\r\n    {\r\n      canvas.requestFullscreen();\r\n    }\r\n    else if(canvas.webkitFullscreenElement)\r\n    {\r\n      canvas.webkitFullscreenElement();\r\n    }\r\n  }\r\n  else\r\n  {\r\n    if(document.exitFullscreen)\r\n    {\r\n      document.exitFullscreen();\r\n    }\r\n    else if(document.webkitFullscreenElement)\r\n    {\r\n      document.webkitFullscreenElement();\r\n    }\r\n  }\r\n})\r\n\r\n\r\nconst renderer = new three.WebGLRenderer\r\n({\r\n  canvas: canvas\r\n});\r\nrenderer.setSize(sizes.width, sizes.height);\r\nrenderer.render(scene,cam);\r\n\r\nconst clock = new three.Clock();\r\nconst tick = () =>\r\n{\r\n  control.update();\r\n  renderer.render(scene, cam);\r\n  window.requestAnimationFrame(tick);\r\n}\r\n\r\ntick();"],"names":["canvas","scene","three.Scene","gui","lilGUI.GUI","sizes","param","ambientLight","three.AmbientLight","sphere","pointLight","geometry","three.BufferGeometry","colors","mats","three.PointsMaterial","three.AdditiveBlending","points","three.Points","genGalaxy","pos","colorInside","three.Color","colorOutside","three.BufferAttribute","i","i3","radius","branchAngle","spinAngle","randomX","randomY","randomZ","mixedColor","sphereGeometry","three.SphereGeometry","sphereMaterial","three.MeshStandardMaterial","three.Mesh","three.PointLight","cam","three.PerspectiveCamera","control","OrbitControls","renderer","three.WebGLRenderer","tick"],"mappings":"+PAIA,MAAMA,EAAS,SAAS,cAAc,cAAc,EAC9CC,EAAQ,IAAIC,EACZC,EAAM,IAAIC,EAEVC,EACN,CACE,MAAO,OAAO,WACd,OAAQ,OAAO,WACjB,EAGMC,EAAQ,CAAE,EAChBA,EAAM,MAAQ,KACdA,EAAM,KAAO,IACbA,EAAM,OAAS,IACfA,EAAM,SAAW,EACjBA,EAAM,KAAO,EACbA,EAAM,WAAa,IACnBA,EAAM,cAAgB,EACtBA,EAAM,YAAc,UACpBA,EAAM,aAAe,UAIrB,MAAMC,EAAe,IAAIC,EAAmB,UAAW,EAAG,EAC1DP,EAAM,IAAIM,CAAY,EAEtB,IAAIE,EAAS,KACTC,EAAa,KAEjB,MAAMC,EAAW,IAAIC,EACfC,EAAS,IAAI,aAAaP,EAAM,MAAQ,CAAC,EAEzCQ,EAAO,IAAIC,EAAqB,CACpC,KAAMT,EAAM,KACZ,gBAAiB,GACjB,WAAY,GACZ,SAAUU,EACV,aAAc,EAChB,CAAC,EACKC,EAAS,IAAIC,EAAaP,EAAUG,CAAI,EAExCK,EAAY,IAClB,CACKF,IAAW,OAEZN,EAAS,QAAS,EAClBG,EAAK,QAAS,EACdb,EAAM,OAAOgB,CAAM,GAGjBR,IACFA,EAAO,SAAS,UAChBA,EAAO,SAAS,UAChBR,EAAM,OAAOQ,CAAM,GAGrB,MAAMW,EAAM,IAAI,aAAad,EAAM,MAAQ,CAAC,EACtCe,EAAc,IAAIC,EAAYhB,EAAM,WAAW,EAC/CiB,EAAe,IAAID,EAAYhB,EAAM,YAAY,EAEvDK,EAAS,aAAa,WAAY,IAAIa,EAAsBJ,EAAK,CAAC,CAAC,EACnET,EAAS,aAAa,QAAS,IAAIa,EAAsBX,EAAQ,CAAC,CAAC,EAEnE,QAAQY,EAAI,EAAGA,EAAInB,EAAM,MAAOmB,IAChC,CACE,MAAMC,EAAKD,EAAI,EACTE,EAAS,KAAK,OAAQ,EAAGrB,EAAM,OAC/BsB,EAAeH,EAAInB,EAAM,SAAYA,EAAM,SAAW,KAAK,GAAK,EAChEuB,EAAYF,EAASrB,EAAM,KAC3BwB,EAAU,KAAK,IAAI,KAAK,OAAQ,EAAExB,EAAM,aAAa,GAAK,KAAK,OAAM,EAAK,GAAM,EAAI,IAAOA,EAAM,WAAaqB,EAC9GI,EAAU,KAAK,IAAI,KAAK,OAAQ,EAAEzB,EAAM,aAAa,GAAK,KAAK,OAAM,EAAK,GAAM,EAAI,IAAOA,EAAM,WAAaqB,EAC9GK,EAAU,KAAK,IAAI,KAAK,OAAQ,EAAE1B,EAAM,aAAa,GAAK,KAAK,OAAM,EAAK,GAAM,EAAI,IAAOA,EAAM,WAAaqB,EAEpHP,EAAIM,CAAI,EAAG,KAAK,IAAIE,EAAcC,CAAS,EAAIF,EAASG,EACxDV,EAAIM,EAAK,CAAC,EAAIK,EACdX,EAAIM,EAAK,CAAC,EAAI,KAAK,IAAIE,EAAcC,CAAS,EAAIF,EAASK,EAE3D,MAAMC,EAAaZ,EAAY,MAAO,EACtCY,EAAW,KAAKV,EAAcI,EAASrB,EAAM,MAAM,EACnDO,EAAOa,GAAOO,EAAW,EACzBpB,EAAOa,EAAK,CAAC,EAAIO,EAAW,EAC5BpB,EAAOa,EAAK,CAAC,EAAIO,EAAW,CAC7B,CACDhC,EAAM,IAAIgB,CAAM,EAEhB,MAAMiB,EAAiB,IAAIC,EAAqB,IAAK,GAAG,EAAE,EACpDC,EAAiB,IAAIC,EAA2B,CACpD,MAAO/B,EAAM,YACb,SAAUA,EAAM,YAChB,kBAAmB,GACnB,UAAW,GACX,UAAW,EACf,CAAG,EACDG,EAAS,IAAI6B,EAAWJ,EAAgBE,CAAc,EACtDnC,EAAM,IAAIQ,CAAM,EAEXC,EAKHA,EAAW,MAAM,IAAIJ,EAAM,WAAW,GAJtCI,EAAa,IAAI6B,EAAiBjC,EAAM,YAAa,EAAG,EAAE,EAC1DI,EAAW,SAAS,IAAI,EAAG,EAAG,CAAC,EAC/BT,EAAM,IAAIS,CAAU,EAIxB,EAEAS,EAAW,EAEXhB,EAAI,IAAIG,EAAO,OAAO,EAAE,IAAI,GAAG,EAAE,IAAI,GAAO,EAAE,KAAK,GAAG,EAAE,eAAea,CAAS,EAChFhB,EAAI,IAAIG,EAAO,MAAM,EAAE,IAAI,IAAK,EAAE,IAAI,EAAG,EAAE,KAAK,IAAK,EAAE,eAAea,CAAS,EAC/EhB,EAAI,IAAIG,EAAO,QAAQ,EAAE,IAAI,GAAI,EAAE,IAAI,EAAE,EAAE,KAAK,GAAI,EAAE,eAAea,CAAS,EAC9EhB,EAAI,IAAIG,EAAM,UAAU,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,CAAC,EAAE,eAAea,CAAS,EACzEhB,EAAI,IAAIG,EAAO,MAAM,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,EAAE,KAAK,IAAK,EAAE,eAAea,CAAS,EAC1EhB,EAAI,IAAIG,EAAQ,YAAY,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,KAAK,IAAK,EAAE,eAAea,CAAS,EAChFhB,EAAI,IAAIG,EAAO,eAAe,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,IAAK,EAAE,eAAea,CAAS,EACnFhB,EAAI,SAASG,EAAO,aAAa,EAAE,eAAea,CAAS,EAC3DhB,EAAI,SAASG,EAAO,cAAc,EAAE,eAAea,CAAS,EAE5D,MAAMqB,EAAM,IAAIC,EAAwB,GAAIpC,EAAM,MAAQA,EAAM,MAAM,EACtEmC,EAAI,SAAS,EAAI,IACjBA,EAAI,SAAS,EAAI,EACjBvC,EAAM,IAAIuC,CAAG,EACb,MAAME,EAAU,IAAIC,EAAcH,EAAKxC,CAAM,EAC7C0C,EAAQ,cAAgB,GAExB,OAAO,iBAAiB,SAAU,IAClC,CACErC,EAAM,MAAQ,OAAO,WACrBA,EAAM,OAAS,OAAO,YACtBmC,EAAI,OAASnC,EAAM,MAAQA,EAAM,OACjCuC,EAAS,QAAQvC,EAAM,MAAOA,EAAM,MAAM,EAE1CmC,EAAI,uBAAsB,CAC5B,CAAC,EAED,OAAO,iBAAiB,WAAY,IACpC,CAC4B,SAAS,mBAAqB,SAAS,wBAe5D,SAAS,eAEV,SAAS,eAAc,EAEjB,SAAS,yBAEf,SAAS,wBAAuB,EAjB/BxC,EAAO,kBAERA,EAAO,kBAAiB,EAElBA,EAAO,yBAEbA,EAAO,wBAAuB,CAcpC,CAAC,EAGD,MAAM4C,EAAW,IAAIC,EACpB,CACC,OAAQ7C,CACV,CAAC,EACD4C,EAAS,QAAQvC,EAAM,MAAOA,EAAM,MAAM,EAC1CuC,EAAS,OAAO3C,EAAMuC,CAAG,EAGzB,MAAMM,EAAO,IACb,CACEJ,EAAQ,OAAM,EACdE,EAAS,OAAO3C,EAAOuC,CAAG,EAC1B,OAAO,sBAAsBM,CAAI,CACnC,EAEAA,EAAM"}