{"version":3,"file":"TextGeometry-9580c65a.js","sources":["../../node_modules/three/examples/jsm/loaders/FontLoader.js","../../node_modules/three/examples/jsm/geometries/TextGeometry.js"],"sourcesContent":["import {\r\n\tFileLoader,\r\n\tLoader,\r\n\tShapePath\r\n} from 'three';\r\n\r\nclass FontLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\r\n\r\n\t\t\tif ( onLoad ) onLoad( font );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( json ) {\r\n\r\n\t\treturn new Font( json );\r\n\r\n\t}\r\n\r\n}\r\n\r\n//\r\n\r\nclass Font {\r\n\r\n\tconstructor( data ) {\r\n\r\n\t\tthis.isFont = true;\r\n\r\n\t\tthis.type = 'Font';\r\n\r\n\t\tthis.data = data;\r\n\r\n\t}\r\n\r\n\tgenerateShapes( text, size = 100 ) {\r\n\r\n\t\tconst shapes = [];\r\n\t\tconst paths = createPaths( text, size, this.data );\r\n\r\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\r\n\r\n\t\t}\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction createPaths( text, size, data ) {\r\n\r\n\tconst chars = Array.from( text );\r\n\tconst scale = size / data.resolution;\r\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\r\n\r\n\tconst paths = [];\r\n\r\n\tlet offsetX = 0, offsetY = 0;\r\n\r\n\tfor ( let i = 0; i < chars.length; i ++ ) {\r\n\r\n\t\tconst char = chars[ i ];\r\n\r\n\t\tif ( char === '\\n' ) {\r\n\r\n\t\t\toffsetX = 0;\r\n\t\t\toffsetY -= line_height;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\r\n\t\t\toffsetX += ret.offsetX;\r\n\t\t\tpaths.push( ret.path );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn paths;\r\n\r\n}\r\n\r\nfunction createPath( char, scale, offsetX, offsetY, data ) {\r\n\r\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\r\n\r\n\tif ( ! glyph ) {\r\n\r\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tconst path = new ShapePath();\r\n\r\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\r\n\r\n\tif ( glyph.o ) {\r\n\r\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\r\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\r\n\r\n\t\t\tconst action = outline[ i ++ ];\r\n\r\n\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\tcase 'm': // moveTo\r\n\r\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\tpath.moveTo( x, y );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'l': // lineTo\r\n\r\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\tpath.lineTo( x, y );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'q': // quadraticCurveTo\r\n\r\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'b': // bezierCurveTo\r\n\r\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn { offsetX: glyph.ha * scale, path: path };\r\n\r\n}\r\n\r\nexport { FontLoader, Font };\r\n","/**\r\n * Text = 3D Text\r\n *\r\n * parameters = {\r\n *  font: <THREE.Font>, // font\r\n *\r\n *  size: <float>, // size of the text\r\n *  height: <float>, // thickness to extrude text\r\n *  curveSegments: <int>, // number of points on the curves\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into text bevel goes\r\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\r\n *  bevelOffset: <float> // how far from text outline does bevel start\r\n * }\r\n */\r\n\r\nimport {\r\n\tExtrudeGeometry\r\n} from 'three';\r\n\r\nclass TextGeometry extends ExtrudeGeometry {\r\n\r\n\tconstructor( text, parameters = {} ) {\r\n\r\n\t\tconst font = parameters.font;\r\n\r\n\t\tif ( font === undefined ) {\r\n\r\n\t\t\tsuper(); // generate default extrude geometry\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\r\n\r\n\t\t\t// translate parameters to ExtrudeGeometry API\r\n\r\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t\t\t// defaults\r\n\r\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\r\n\t\t\tsuper( shapes, parameters );\r\n\r\n\t\t}\r\n\r\n\t\tthis.type = 'TextGeometry';\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { TextGeometry };\r\n"],"names":["FontLoader","Loader","manager","url","onLoad","onProgress","onError","scope","loader","FileLoader","text","font","json","Font","data","size","shapes","paths","createPaths","p","pl","chars","scale","line_height","offsetX","offsetY","i","char","ret","createPath","glyph","path","ShapePath","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","l","TextGeometry","ExtrudeGeometry","parameters"],"mappings":"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","x_google_ignoreList":[0,1]}