{"version":3,"file":"page10-e150f06e.js","sources":["../../src/act2/script2.js"],"sourcesContent":["import * as three from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\nimport * as dat from 'lil-gui'\r\n\r\n\r\n/**\r\n * Base\r\n */\r\n// Debug\r\nconst gui = new dat.GUI()\r\n\r\n// Canvas\r\nconst canvas = document.querySelector('canvas.webgl')\r\n\r\n// Scene\r\nconst scene = new three.Scene()\r\n\r\n \r\n// texture among us\r\n\r\nconst textureLoader = new three.TextureLoader()\r\n\r\nconst doorColorTexture = textureLoader.load('/textures/door/color.jpg')\r\nconst doorAlphaTexture = textureLoader.load('/textures/door/alpha.jpg')\r\nconst doorAmbientOcclusionTexture =\r\ntextureLoader.load('/textures/door/ambientOcclusion.jpg')\r\nconst doorHeightTexture = textureLoader.load('/textures/door/height.jpg')\r\nconst doorNormalTexture = textureLoader.load('/textures/door/normal.jpg')\r\nconst doorMetalnessTexture =\r\ntextureLoader.load('/textures/door/metalness.jpg')\r\nconst doorRoughnessTexture =\r\ntextureLoader.load('/textures/door/roughness.jpg')\r\n\r\nconst bricksColorTexture = textureLoader.load('textures/bricks/color.jpg')\r\nconst bricksAmbientOcclusionTexture =\r\ntextureLoader.load('/textures/bricks/ambientOcclusion.jpg')\r\nconst bricksNormalTexture =\r\ntextureLoader.load('/textures/bricks/normal.jpg')\r\nconst bricksRoughnessTexture =\r\ntextureLoader.load('/textures/bricks/roughness.jpg')\r\n\r\nconst grassColorTexture = textureLoader.load('/textures/grass/color.jpg')\r\nconst grassAmbientOcclusionTexture =\r\ntextureLoader.load('/textures/grass/ambientOcclusion.jpg')\r\nconst grassNormalTexture = textureLoader.load('/textures/grass/normal.jpg')\r\nconst grassRoughnessTexture =\r\ntextureLoader.load('/textures/grass/roughness.jpg')\r\n\r\n\r\n/**\r\n * Lights\r\n */\r\n\r\nconst ambientLight = new three.AmbientLight(0xffffff, 0)\r\nambientLight.color = new three.Color(0xff00ff)\r\nambientLight.intensity = 0\r\nscene.add(ambientLight)\r\n\r\nconst directionalLight = new three.DirectionalLight(0x00fffc, 0.25)\r\nscene.add(directionalLight)\r\ndirectionalLight.position.set(-5, 3, 0)\r\nconst directionalLightHelper = new three.DirectionalLightHelper(directionalLight, 0)\r\nscene.add(directionalLightHelper)\r\n\r\nconst hemisphereLight = new three.HemisphereLight(0xff0000, 0x0000ff, 0)\r\nhemisphereLight.position.x = 5\r\nscene.add(hemisphereLight)\r\nconst hemisphereLightHelper = new three.HemisphereLightHelper(hemisphereLight, 0)\r\nscene.add(hemisphereLightHelper)\r\n\r\nconst pointLight = new three.PointLight(0x00ffff, 0)\r\npointLight.position.y = 3\r\nscene.add(pointLight)\r\nconst pointLightHelper = new three.PointLightHelper(pointLight, 0)\r\nscene.add(pointLightHelper)\r\n\r\n// const rectAreaLight = new three.RectAreaLight(0x4e00ff, 2, 1, 1)\r\n// scene.add(rectAreaLight)\r\n// rectAreaLight.position.set(- 1.5, 0, 1.5)\r\n// rectAreaLight.lookAt(new three.Vector3())\r\n\r\nconst spotLight = new three.SpotLight(0x78ff00, 0, 10, Math.PI * 0.1, 0.25, 1)\r\nspotLight.position.y = 5\r\nscene.add(spotLight)\r\nscene.add(spotLight.target)\r\nconst spotLightHelper = new three.SpotLightHelper(spotLight)\r\nscene.add(spotLightHelper)\r\n\r\n// GUI here\r\ngui.add(ambientLight, 'intensity').min(0).max(1).step(0.001).name(\"Ambient brightness\")\r\n// useless haha\r\n// const ambientLightDrop =  gui.addFolder('AmbientLight Position')\r\n// ambientLightDrop.add(ambientLight.position, 'x', -5, 5, 0.01)\r\n// ambientLightDrop.add(ambientLight.position, 'y', -5, 5, 0.01)\r\n// ambientLightDrop.add(ambientLight.position, 'z', -5, 5, 0.01)\r\n\r\ngui.add(directionalLight, 'intensity').min(0).max(1).step(0.001).name(\"Directional brightness\")\r\nconst directionalLightDrop =  gui.addFolder('DirectionalLight Position')\r\ndirectionalLightDrop.add(directionalLight.position, 'x', -5, 5, 0.01)\r\ndirectionalLightDrop.add(directionalLight.position, 'y', -5, 5, 0.01)\r\ndirectionalLightDrop.add(directionalLight.position, 'z', -5, 5, 0.01)\r\ndirectionalLightDrop.add(directionalLight, 'visible').name(\"on\")\r\ndirectionalLightDrop.add(directionalLightHelper, 'visible').name(\"helper\")\r\n\r\ngui.add(hemisphereLight, 'intensity').min(0).max(1).step(0.001).name(\"Hemispehere brightness\")\r\nconst hemisphereLightDrop =  gui.addFolder('HemisphereLight Position')\r\nhemisphereLightDrop.add(hemisphereLight.position, 'x', -5, 5, 0.01)\r\nhemisphereLightDrop.add(hemisphereLight.position, 'y', -5, 5, 0.01)\r\nhemisphereLightDrop.add(hemisphereLight.position, 'z', -5, 5, 0.01)\r\nhemisphereLightDrop.add(hemisphereLight, 'visible').name(\"on\")\r\nhemisphereLightDrop.add(hemisphereLightHelper, 'visible').name(\"helper\")\r\n\r\ngui.add(pointLight, 'intensity', 0, 1, 0.001).name(\"PointLight brightness\")\r\nconst pointLightDrop =  gui.addFolder('PointLight Position')\r\npointLightDrop.add(pointLight.position, 'x', -5, 5, 0.01)\r\npointLightDrop.add(pointLight.position, 'y', -5, 5, 0.01)\r\npointLightDrop.add(pointLight.position, 'z', -5, 5, 0.01)\r\npointLightDrop.add(pointLight, 'visible').name(\"on\")\r\npointLightDrop.add(pointLightHelper, 'visible').name(\"helper\")\r\n\r\n\r\ngui.add(spotLight, 'intensity', 0, 1, 0.001).name(\"SpotLight brightness\")\r\nconst spotLightDrop =  gui.addFolder('spotLight Position')\r\nspotLightDrop.add(spotLight.position, 'x', -5, 5, 0.01)\r\nspotLightDrop.add(spotLight.position, 'y', -5, 5, 0.01)\r\nspotLightDrop.add(spotLight.position, 'z', -5, 5, 0.01)\r\nconst spotLightTargetDrop =  gui.addFolder('spotlight target Position')\r\nspotLightTargetDrop.add(spotLight.target.position, 'x', -5, 5, 0.01)\r\nspotLightTargetDrop.add(spotLight.target.position, 'y', -5, 5, 0.01)\r\nspotLightTargetDrop.add(spotLight.target.position, 'z', -5, 5, 0.01)\r\nspotLightDrop.add(spotLight, 'visible').name(\"on\")\r\nspotLightDrop.add(spotLightHelper, 'visible').name(\"helper\")\r\n\r\n\r\n\r\n// ambientLightDrop.close()\r\ndirectionalLightDrop.close()\r\nhemisphereLightDrop.close()\r\npointLightDrop.close()\r\nspotLightDrop.close()\r\nspotLightTargetDrop.close()\r\n/**\r\n * Objects\r\n */\r\n// Material\r\nconst material = new three.MeshStandardMaterial()\r\nmaterial.roughness = 0.4\r\n\r\n// Objects\r\nconst sphere = new three.Mesh(\r\n    new three.SphereGeometry(0.5, 32, 32),\r\n    material\r\n)\r\n\r\nconst cube = new three.Mesh(\r\n    new three.BoxGeometry(0.75, 0.75, 0.75),\r\n    material\r\n)\r\n\r\nconst torus = new three.Mesh(\r\n    new three.TorusGeometry(0.3, 0.2, 32, 64),\r\n    material\r\n)\r\n\r\n// const plane = new three.Mesh(\r\n//     new three.PlaneGeometry(20, 20),\r\n//     material\r\n// )\r\nconst plane = new three.Mesh(\r\n    new three.PlaneGeometry(20, 20),\r\n    new three.MeshStandardMaterial({\r\n        map: grassColorTexture,\r\n        aoMap: grassAmbientOcclusionTexture,\r\n        normalMap: grassNormalTexture,\r\n        roughnessMap: grassRoughnessTexture\r\n    })\r\n)\r\nplane.geometry.setAttribute('uv2', new\r\nthree.Float32BufferAttribute(plane.geometry.attributes.uv.array, 2))\r\nplane.rotation.x = - Math.PI * 0.5\r\nplane.position.y = - 0.65\r\n\r\n// shadow\r\ndirectionalLight.castShadow = true;\r\npointLight.castShadow = true;\r\nspotLight.castShadow = true;\r\n\r\ndirectionalLight.shadow.camera.near = 0.5;\r\ndirectionalLight.shadow.camera.far = 10;\r\ndirectionalLight.shadow.camera.left = -5;\r\ndirectionalLight.shadow.camera.right = 5;\r\ndirectionalLight.shadow.camera.top = 5;\r\ndirectionalLight.shadow.camera.bottom = -5;\r\n\r\nsphere.position.x = 9\r\nsphere.position.z = 1\r\ncube.position.x = 9\r\ncube.position.z = 2.5\r\ntorus.position.x = 9\r\ntorus.position.z = -0.5\r\n\r\n\r\n\r\nsphere.castShadow = true\r\ncube.castShadow = true\r\ntorus.castShadow = true\r\nplane.receiveShadow = true\r\n\r\nscene.add(sphere, cube, torus, plane)\r\n\r\n//house\r\n\r\nconst house = new three.Group()\r\nscene.add(house)\r\n\r\nconst walls = new three.Mesh(\r\n    new three.BoxGeometry(4, 2.5, 4),\r\n    new three.MeshStandardMaterial({ \r\n        map: bricksColorTexture,\r\n    aoMap: bricksAmbientOcclusionTexture,\r\n    normalMap: bricksNormalTexture,\r\n    roughnessMap: bricksRoughnessTexture\r\n    })\r\n    )\r\n    walls.position.y = 0.65\r\n    house.add(walls)\r\n\r\n\r\nconst roof = new three.Mesh(\r\n    new three.ConeGeometry(3.5, 1, 4),\r\n    new three.MeshStandardMaterial({ color: '#b35f45' })\r\n    )\r\nroof.rotation.y = Math.PI * 0.25\r\nroof.position.y = 2.35\r\nhouse.add(roof)\r\n\r\n// Door\r\nconst door = new three.Mesh(\r\n    new three.PlaneGeometry(2, 2),\r\n    new three.MeshStandardMaterial({\r\n        map: doorColorTexture,\r\n        transparent: true,\r\n        alphaMap: doorAlphaTexture,\r\n        aoMap: doorAmbientOcclusionTexture,\r\n        displacementMap: doorHeightTexture,\r\n        displacementScale: 0.1,\r\n        normalMap: doorNormalTexture,\r\n        metalnessMap: doorMetalnessTexture,\r\n        roughnessMap: doorRoughnessTexture\r\n    })\r\n    )\r\ndoor.position.y = 0.4\r\ndoor.position.z = 2.001\r\nhouse.add(door)\r\n\r\n// Bushes\r\nconst bushGeometry = new three.SphereGeometry(1, 16, 16)\r\nconst bushMaterial = new three.MeshStandardMaterial({ color: '#89c854' })\r\nconst bush1 = new three.Mesh(bushGeometry, bushMaterial)\r\nbush1.scale.set(0.5, 0.5, 0.5)\r\nbush1.position.set(0.8, -0.4, 2.2)\r\nconst bush2 = new three.Mesh(bushGeometry, bushMaterial)\r\nbush2.scale.set(0.25, 0.25, 0.25)\r\nbush2.position.set(1.4, -0.6, 2.1)\r\nconst bush3 = new three.Mesh(bushGeometry, bushMaterial)\r\nbush3.scale.set(0.4, 0.4, 0.4)\r\nbush3.position.set(- 0.8, -0.4, 2.2)\r\nconst bush4 = new three.Mesh(bushGeometry, bushMaterial)\r\nbush4.scale.set(0.15, 0.15, 0.15)\r\nbush4.position.set(- 1, -0.6, 2.6)\r\nhouse.add(bush1, bush2, bush3, bush4)\r\n\r\n\r\n// Graves\r\nconst graves = new three.Group()\r\nscene.add(graves)\r\n\r\nconst graveGeometry = new three.BoxGeometry(0.6, 0.8, 0.2)\r\nconst graveMaterial = new three.MeshStandardMaterial({ color: '#b2b6b1' })\r\n\r\nfor(let i = 0; i < 50; i++)\r\n{\r\n    const angle = Math.random() * Math.PI * 2 // Random angle\r\n    const radius = 3 + Math.random() * 6 // Random radius\r\n    const x = Math.cos(angle) * radius // Get the x position using cosinus\r\n    const z = Math.sin(angle) * radius // Get the z position using sinus\r\n    // Create the mesh\r\n    const grave = new three.Mesh(graveGeometry, graveMaterial)\r\n    // Position\r\n    grave.position.set(x, -0.4, z)\r\n    // Rotation\r\n    grave.rotation.z = (Math.random() - 0.5) * 0.4\r\n    grave.rotation.y = (Math.random() - 0.5) * 0.4\r\n    // Add to the graves container\r\n    graves.add(grave)\r\n}\r\n\r\nconst moonLight = new three.DirectionalLight('#b9d5ff', 0.12)\r\nconst doorLight = new three.PointLight('#ff7d46', 1, 7)\r\ndoorLight.position.set(0, 1.75, 2.7)\r\nhouse.add(doorLight)\r\n\r\nconst fog = new three.Fog('#262837', 1, 15)\r\nscene.fog = fog\r\n\r\n/**\r\n * Sizes\r\n */\r\nconst sizes = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n}\r\n\r\nwindow.addEventListener('resize', () =>\r\n{\r\n    // Update sizes\r\n    sizes.width = window.innerWidth\r\n    sizes.height = window.innerHeight\r\n\r\n    // Update camera\r\n    camera.aspect = sizes.width / sizes.height\r\n    camera.updateProjectionMatrix()\r\n\r\n    // Update renderer\r\n    renderer.setSize(sizes.width, sizes.height)\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n})\r\n\r\n\r\n\r\n\r\n/**\r\n * Camera\r\n */\r\n// Base camera\r\nconst camera = new three.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\r\ncamera.position.x = -3\r\ncamera.position.y = 3\r\ncamera.position.z = 10\r\nscene.add(camera)\r\n\r\n// Controls\r\nconst controls = new OrbitControls(camera, canvas)\r\ncontrols.enableDamping = true\r\n\r\n/**\r\n * Renderer\r\n */\r\nconst renderer = new three.WebGLRenderer({\r\n    canvas: canvas\r\n})\r\nrenderer.setSize(sizes.width, sizes.height)\r\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\nrenderer.shadowMap.enabled = true\r\ndirectionalLight.shadow.mapSize.width = 1024\r\ndirectionalLight.shadow.mapSize.height = 1024\r\nspotLight.shadow.mapSize.width = 1024\r\nspotLight.shadow.mapSize.height = 1024\r\npointLight.shadow.mapSize.width = 1024\r\npointLight.shadow.mapSize.height = 1024\r\nrenderer.setClearColor('#262837') // clear color of the renderer and use the fog color\r\n\r\n\r\n/**\r\n * Animate\r\n */\r\nconst clock = new three.Clock()\r\n\r\nconst tick = () =>\r\n{\r\n    const elapsedTime = clock.getElapsedTime()\r\n\r\n    // Update objects\r\n    sphere.rotation.y = 0.1 * elapsedTime\r\n    cube.rotation.y = 0.1 * elapsedTime\r\n    torus.rotation.y = 0.1 * elapsedTime\r\n\r\n    sphere.rotation.x = 0.15 * elapsedTime\r\n    cube.rotation.x = 0.15 * elapsedTime\r\n    torus.rotation.x = 0.15 * elapsedTime\r\n\r\n\r\n    // helpers update\r\n    spotLightHelper.update();\r\n    // Update controls\r\n    controls.update()\r\n\r\n    // Render\r\n    renderer.render(scene, camera)\r\n\r\n    // Call tick again on the next frame\r\n    window.requestAnimationFrame(tick)\r\n}\r\n\r\ntick()"],"names":["gui","dat.GUI","canvas","scene","three.Scene","textureLoader","three.TextureLoader","doorColorTexture","doorAlphaTexture","doorAmbientOcclusionTexture","doorHeightTexture","doorNormalTexture","doorMetalnessTexture","doorRoughnessTexture","bricksColorTexture","bricksAmbientOcclusionTexture","bricksNormalTexture","bricksRoughnessTexture","grassColorTexture","grassAmbientOcclusionTexture","grassNormalTexture","grassRoughnessTexture","ambientLight","three.AmbientLight","three.Color","directionalLight","three.DirectionalLight","directionalLightHelper","three.DirectionalLightHelper","hemisphereLight","three.HemisphereLight","hemisphereLightHelper","three.HemisphereLightHelper","pointLight","three.PointLight","pointLightHelper","three.PointLightHelper","spotLight","three.SpotLight","spotLightHelper","three.SpotLightHelper","directionalLightDrop","hemisphereLightDrop","pointLightDrop","spotLightDrop","spotLightTargetDrop","material","three.MeshStandardMaterial","sphere","three.Mesh","three.SphereGeometry","cube","three.BoxGeometry","torus","three.TorusGeometry","plane","three.PlaneGeometry","three.Float32BufferAttribute","house","three.Group","walls","roof","three.ConeGeometry","door","bushGeometry","bushMaterial","bush1","bush2","bush3","bush4","graves","graveGeometry","graveMaterial","i","angle","radius","x","z","grave","doorLight","fog","three.Fog","sizes","camera","renderer","three.PerspectiveCamera","controls","OrbitControls","three.WebGLRenderer","clock","three.Clock","tick","elapsedTime"],"mappings":"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"}