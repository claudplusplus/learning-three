{"version":3,"file":"page7-ad62a146.js","sources":["../../src/act1/script4to5.js"],"sourcesContent":["import * as three from 'three'\r\nimport gsap from 'gsap'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\n\r\nconst canvas = document.querySelector('canvas.webgl');\r\n\r\nconst scene = new three.Scene();\r\n\r\nconst sizes =\r\n{\r\n  width: window.innerWidth,\r\n  height: window.innerHeight\r\n};\r\n\r\nconst obj = new three.BoxGeometry(1,1,1);\r\nconst mat = new three.MeshBasicMaterial({color: 0xff3100});\r\nconst mesh = new three.Mesh(obj,mat);\r\nscene.add(mesh);\r\n\r\n// camera ---------------------------------------------\r\nconst cam = new three.PerspectiveCamera(75, sizes.width / sizes.height, 2, 100);\r\n// const aspectRatio = sizes.width / sizes.height;\r\n// const cam = new three.OrthographicCamera(- 1 * aspectRatio, 1 * aspectRatio, 1, - 1, 0.1, 100);\r\n// cam.position.x = 2;\r\n// cam.position.y = 2;\r\n\r\ncam.position.z = 3;\r\n// cam.lookAt(mesh.position);\r\nscene.add(cam);\r\n\r\n//orbit\r\nconst controls = new OrbitControls(cam,canvas);\r\ncontrols.target.y = 2;\r\ncontrols.enableDamping = true;\r\n// -------------------------------------------------\r\n\r\n\r\nconst renderer = new three.WebGLRenderer\r\n(\r\n  {\r\n    canvas: canvas\r\n  }\r\n);\r\nrenderer.setSize(sizes.width,sizes.height);\r\nrenderer.render(scene,cam);\r\n\r\n// cursor -----------------------------------------\r\nconst cursor = \r\n{\r\n  x: 0,\r\n  y: 0\r\n}\r\n\r\n\r\nwindow.addEventListener('mousemove', (event) =>\r\n{\r\n  cursor.x = event.clientX / sizes.width - 0.5\r\n  cursor.y = - (event.clientY / sizes.height - 0.5)\r\n  console.log(cursor.x, cursor.y);\r\n})\r\n// -------------------------------------------------\r\n\r\n// animation --------------\r\n// let time = Date.now();\r\n// const clock = new three.Clock();\r\ngsap.to(mesh.position, {duration: 1, delay: 1, x:2 });\r\n\r\nconst tick = () =>\r\n{\r\n  // console.log('tick');\r\n  // const currTime = Date.now();\r\n  // const deltaTime = currTime - time\r\n  // time = currTime;\r\n  // const elapsedTime = clock.getElapsedTime();\r\n\r\n  // mesh.position.x = Math.cos(elapsedTime)\r\n  // mesh.position.y = Math.sin(elapsedTime)\r\n  // mesh.rotation.z = elapsedTime;\r\n  // cam.lookAt(mesh.position);\r\n\r\n  // cam.position.x = Math.sin(cursor.x * Math.PI * 2) * 2;\r\n  // cam.position.z = Math.cos(cursor.x * Math.PI * 2) * 2;\r\n  // cam.position.y = cursor.y * 2;\r\n  // cam.lookAt(mesh.position);\r\n\r\n  controls.update();\r\n  renderer.render(scene,cam);\r\n\r\n  window.requestAnimationFrame(tick);\r\n}\r\n\r\ntick();\r\n//------------------------------------------------------"],"names":["canvas","scene","three.Scene","sizes","obj","three.BoxGeometry","mat","three.MeshBasicMaterial","mesh","three.Mesh","cam","three.PerspectiveCamera","controls","OrbitControls","renderer","three.WebGLRenderer","cursor","event","gsap","tick"],"mappings":"sMAIA,MAAMA,EAAS,SAAS,cAAc,cAAc,EAE9CC,EAAQ,IAAIC,EAEZC,EACN,CACE,MAAO,OAAO,WACd,OAAQ,OAAO,WACjB,EAEMC,EAAM,IAAIC,EAAkB,EAAE,EAAE,CAAC,EACjCC,EAAM,IAAIC,EAAwB,CAAC,MAAO,QAAQ,CAAC,EACnDC,EAAO,IAAIC,EAAWL,EAAIE,CAAG,EACnCL,EAAM,IAAIO,CAAI,EAGd,MAAME,EAAM,IAAIC,EAAwB,GAAIR,EAAM,MAAQA,EAAM,OAAQ,EAAG,GAAG,EAM9EO,EAAI,SAAS,EAAI,EAEjBT,EAAM,IAAIS,CAAG,EAGb,MAAME,EAAW,IAAIC,EAAcH,EAAIV,CAAM,EAC7CY,EAAS,OAAO,EAAI,EACpBA,EAAS,cAAgB,GAIzB,MAAME,EAAW,IAAIC,EAEnB,CACE,OAAQf,CACT,CACH,EACAc,EAAS,QAAQX,EAAM,MAAMA,EAAM,MAAM,EACzCW,EAAS,OAAOb,EAAMS,CAAG,EAGzB,MAAMM,EACN,CACE,EAAG,EACH,EAAG,CACL,EAGA,OAAO,iBAAiB,YAAcC,GACtC,CACED,EAAO,EAAIC,EAAM,QAAUd,EAAM,MAAQ,GACzCa,EAAO,EAAI,EAAGC,EAAM,QAAUd,EAAM,OAAS,IAC7C,QAAQ,IAAIa,EAAO,EAAGA,EAAO,CAAC,CAChC,CAAC,EAMDE,EAAK,GAAGV,EAAK,SAAU,CAAC,SAAU,EAAG,MAAO,EAAG,EAAE,CAAG,CAAA,EAEpD,MAAMW,EAAO,IACb,CAiBEP,EAAS,OAAM,EACfE,EAAS,OAAOb,EAAMS,CAAG,EAEzB,OAAO,sBAAsBS,CAAI,CACnC,EAEAA"}